Elm.MissileCommand = Elm.MissileCommand || {};
Elm.MissileCommand.make = function (_elm) {
   "use strict";
   _elm.MissileCommand = _elm.MissileCommand || {};
   if (_elm.MissileCommand.values)
   return _elm.MissileCommand.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "MissileCommand",
   $Basics = Elm.Basics.make(_elm),
   $Color = Elm.Color.make(_elm),
   $Graphics$Collage = Elm.Graphics.Collage.make(_elm),
   $Graphics$Element = Elm.Graphics.Element.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Mouse = Elm.Mouse.make(_elm),
   $Random = Elm.Random.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Text = Elm.Text.make(_elm),
   $Time = Elm.Time.make(_elm),
   $Touch = Elm.Touch.make(_elm),
   $Window = Elm.Window.make(_elm);
   var delta = $Time.fps(60);
   var txt = F2(function (f,msg) {
      return f($Graphics$Collage.toForm($Graphics$Element.leftAligned($Text.monospace($Text.color($Color.white)($Text.fromString(msg))))));
   });
   var drawGameInfo = F2(function (_v0,
   _v1) {
      return function () {
         return function () {
            switch (_v0.ctor)
            {case "_Tuple2":
               return function () {
                    var $ = {ctor: "_Tuple2"
                            ,_0: $Basics.toFloat(_v0._0)
                            ,_1: $Basics.toFloat(_v0._1)},
                    w = $._0,
                    h = $._1;
                    return A2($Graphics$Collage.collage,
                    _v0._0,
                    _v0._1)(_L.fromArray([A2(txt,
                                         $Graphics$Collage.move({ctor: "_Tuple2"
                                                                ,_0: (0 - w) / 3
                                                                ,_1: h / 2 - 10}),
                                         A2($Basics._op["++"],
                                         "Score ",
                                         $Basics.toString(_v1.score)))
                                         ,A2(txt,
                                         $Graphics$Collage.move({ctor: "_Tuple2"
                                                                ,_0: w / 3
                                                                ,_1: h / 2 - 10}),
                                         A2($Basics._op["++"],
                                         "HP ",
                                         $Basics.toString(_v1.hp)))]));
                 }();}
            _U.badCase($moduleName,
            "between lines 207 and 210");
         }();
      }();
   });
   var drawExplosions = function (_v6) {
      return function () {
         return function () {
            var _v8 = _v6.status;
            switch (_v8.ctor)
            {case "Exploding":
               return $Maybe.Just($Graphics$Collage.move({ctor: "_Tuple2"
                                                         ,_0: _v6.x
                                                         ,_1: _v6.y})($Graphics$Collage.alpha(0.5)($Graphics$Collage.filled(A3($Color.rgb,
                 150,
                 170,
                 150))($Graphics$Collage.circle(_v8._0)))));}
            return $Maybe.Nothing;
         }();
      }();
   };
   var pairWise = function (lst) {
      return function () {
         var loop = F2(function (lst,
         acc) {
            return function () {
               switch (lst.ctor)
               {case "::": switch (lst._1.ctor)
                    {case "::": return A2(loop,
                         lst._1._1,
                         A2($List._op["::"],
                         {ctor: "_Tuple2"
                         ,_0: lst._0
                         ,_1: lst._1._0},
                         acc));}
                    break;
                  case "[]": return acc;}
               _U.badCase($moduleName,
               "between lines 95 and 98");
            }();
         });
         return A2(loop,
         lst,
         _L.fromArray([]));
      }();
   };
   var extractJust = function (x) {
      return function () {
         switch (x.ctor)
         {case "Just": return x._0;}
         _U.badCase($moduleName,
         "between lines 57 and 58");
      }();
   };
   var filterJust = function (x) {
      return function () {
         switch (x.ctor)
         {case "Just": return true;}
         return false;
      }();
   };
   var choose = F2(function (f,
   lst) {
      return $List.map(extractJust)($List.filter(filterJust)(A2($List.map,
      f,
      lst)));
   });
   var EnemyLaunch = {ctor: "EnemyLaunch"};
   var enemyLaunch = A2($Signal.map,
   function (_v19) {
      return function () {
         return EnemyLaunch;
      }();
   },
   $Time.every(2 * $Time.second));
   var UserAction = function (a) {
      return {ctor: "UserAction"
             ,_0: a};
   };
   var userInput = function () {
      var convert = F2(function (_v21,
      _v22) {
         return function () {
            return function () {
               switch (_v21.ctor)
               {case "_Tuple2":
                  return {ctor: "_Tuple2"
                         ,_0: $Basics.toFloat(_v22.x) - $Basics.toFloat(_v21._0) / 2
                         ,_1: $Basics.toFloat(_v21._1) / 2 - $Basics.toFloat(_v22.y)};}
               _U.badCase($moduleName,
               "on line 237, column 34 to 82");
            }();
         }();
      });
      return $Signal.map(function (_v27) {
         return function () {
            switch (_v27.ctor)
            {case "_Tuple2":
               return UserAction({_: {}
                                 ,x: _v27._0
                                 ,y: _v27._1});}
            _U.badCase($moduleName,
            "on line 240, column 32 to 53");
         }();
      })($Signal.sampleOn($Mouse.clicks)(A2($Signal._op["~"],
      A2($Signal._op["<~"],
      convert,
      $Window.dimensions),
      $Touch.taps)));
   }();
   var Time = function (a) {
      return {ctor: "Time",_0: a};
   };
   var timer = $Signal.sampleOn(delta)(A2($Signal._op["<~"],
   function (n) {
      return Time(n / 1000);
   },
   delta));
   var input = $Signal.mergeMany(_L.fromArray([timer
                                              ,userInput
                                              ,enemyLaunch]));
   var GameState = F6(function (a,
   b,
   c,
   d,
   e,
   f) {
      return {_: {}
             ,enemyMissiles: b
             ,friendlyMissiles: a
             ,hp: d
             ,score: c
             ,seed: f
             ,status: e};
   });
   var Missile = F4(function (a,
   b,
   c,
   d) {
      return {_: {}
             ,kind: c
             ,status: d
             ,x: a
             ,y: b};
   });
   var Collision = {ctor: "Collision"};
   var CaughtInBlast = {ctor: "CaughtInBlast"};
   var ReachedTarget = {ctor: "ReachedTarget"};
   var Enemy = {ctor: "Enemy"};
   var drawTrail = function (_v31) {
      return function () {
         return function () {
            var _v33 = _v31.status;
            switch (_v33.ctor)
            {case "Flying":
               return function () {
                    var $ = _U.eq(_v31.kind,
                    Enemy) ? {ctor: "_Tuple3"
                             ,_0: $Color.red
                             ,_1: 0.5
                             ,_2: 5} : {ctor: "_Tuple3"
                                       ,_0: $Color.blue
                                       ,_1: 0.2
                                       ,_2: 1},
                    colour = $._0,
                    alphaVal = $._1,
                    lineW = $._2;
                    var lineStyle = $Graphics$Collage.solid(colour);
                    return $Maybe.Just($Graphics$Collage.alpha(alphaVal)($Graphics$Collage.traced(_U.replace([["width"
                                                                                                              ,lineW]],
                    lineStyle))($Graphics$Collage.path(_L.fromArray([{ctor: "_Tuple2"
                                                                     ,_0: _v31.x
                                                                     ,_1: _v31.y}
                                                                    ,{ctor: "_Tuple2"
                                                                     ,_0: _v33._0.x
                                                                     ,_1: _v33._0.y}])))));
                 }();}
            return $Maybe.Nothing;
         }();
      }();
   };
   var Friendly = {ctor: "Friendly"};
   var Exploded = {ctor: "Exploded"};
   var Exploding = function (a) {
      return {ctor: "Exploding"
             ,_0: a};
   };
   var Flying = F3(function (a,
   b,
   c) {
      return {ctor: "Flying"
             ,_0: a
             ,_1: b
             ,_2: c};
   });
   var Ended = {ctor: "Ended"};
   var Started = {ctor: "Started"};
   var NotStarted = {ctor: "NotStarted"};
   var defaultGame = {_: {}
                     ,enemyMissiles: _L.fromArray([])
                     ,friendlyMissiles: _L.fromArray([])
                     ,hp: 10
                     ,score: 0
                     ,seed: $Random.initialSeed(1)
                     ,status: NotStarted};
   var Velocity = F2(function (a,
   b) {
      return {_: {},vx: a,vy: b};
   });
   var blastRadius = 50;
   var explosionSpd = 30;
   var speed = 50;
   var calcVelocity = F2(function (start,
   end) {
      return function () {
         var distV = end.y - start.y;
         var distH = end.x - start.x;
         var angle = A2($Basics.atan2,
         distV,
         distH);
         return {_: {}
                ,vx: speed * $Basics.cos(angle)
                ,vy: speed * $Basics.sin(angle)};
      }();
   });
   var newMissile = F3(function (start,
   end,
   kind) {
      return function () {
         var velocity = A2(calcVelocity,
         start,
         end);
         return {_: {}
                ,kind: kind
                ,status: A3(Flying,
                start,
                end,
                velocity)
                ,x: start.x
                ,y: start.y};
      }();
   });
   var missileW = 10;
   var hitTest = F2(function (missile1,
   missile2) {
      return function () {
         var isCollision = F5(function (x,
         y,
         centreX,
         centreY,
         radius) {
            return function () {
               var $ = {ctor: "_Tuple4"
                       ,_0: centreX - radius
                       ,_1: centreX + radius
                       ,_2: centreY - radius
                       ,_3: centreY + radius},
               minX = $._0,
               maxX = $._1,
               minY = $._2,
               maxY = $._3;
               return _U.cmp(minX,
               x) < 1 && (_U.cmp(x,
               maxX) < 1 && (_U.cmp(minY,
               y) < 1 && _U.cmp(y,maxY) < 1));
            }();
         });
         return function () {
            var _v37 = {ctor: "_Tuple2"
                       ,_0: missile1.status
                       ,_1: missile2.status};
            switch (_v37.ctor)
            {case "_Tuple2":
               switch (_v37._0.ctor)
                 {case "Flying":
                    switch (_v37._1.ctor)
                      {case "Exploding":
                         return A5(isCollision,
                           missile1.x,
                           missile1.y,
                           missile2.x,
                           missile2.y,
                           _v37._1._0);
                         case "Flying":
                         return !_U.eq(missile1.kind,
                           missile2.kind) && A5(isCollision,
                           missile1.x,
                           missile1.y,
                           missile2.x,
                           missile2.y,
                           missileW / 2);}
                      break;}
                 return false;}
            _U.badCase($moduleName,
            "between lines 78 and 86");
         }();
      }();
   });
   var stepMissile = F3(function (delta,
   _v47,
   missile) {
      return function () {
         return function () {
            var _v49 = missile.status;
            switch (_v49.ctor)
            {case "Exploding":
               return function () {
                    var newRadius = _v49._0 + explosionSpd * delta;
                    var disappear = _U.cmp(newRadius,
                    blastRadius) > 0;
                    return disappear ? {ctor: "_Tuple2"
                                       ,_0: _U.replace([["status"
                                                        ,Exploded]],
                                       missile)
                                       ,_1: $Maybe.Nothing} : {ctor: "_Tuple2"
                                                              ,_0: _U.replace([["status"
                                                                               ,Exploding(newRadius)]],
                                                              missile)
                                                              ,_1: $Maybe.Nothing};
                 }();
               case "Flying":
               return function () {
                    var inBlastRadius = $List.any(hitTest(missile))(A2($Basics._op["++"],
                    _v47.friendlyMissiles,
                    _v47.enemyMissiles));
                    var newY = missile.y + _v49._2.vy * delta;
                    var reachedEnd = _U.cmp(_v49._2.vy,
                    0) > 0 ? _U.cmp(newY,
                    _v49._1.y) > 0 : _U.cmp(newY,
                    _v49._1.y) < 0;
                    var newX = missile.x + _v49._2.vx * delta;
                    return reachedEnd || inBlastRadius ? {ctor: "_Tuple2"
                                                         ,_0: _U.replace([["x"
                                                                          ,newX]
                                                                         ,["y"
                                                                          ,newY]
                                                                         ,["status"
                                                                          ,Exploding(0)]],
                                                         missile)
                                                         ,_1: $Maybe.Just(reachedEnd ? ReachedTarget : CaughtInBlast)} : {ctor: "_Tuple2"
                                                                                                                         ,_0: _U.replace([["x"
                                                                                                                                          ,newX]
                                                                                                                                         ,["y"
                                                                                                                                          ,newY]],
                                                                                                                         missile)
                                                                                                                         ,_1: $Maybe.Nothing};
                 }();}
            _U.badCase($moduleName,
            "between lines 110 and 127");
         }();
      }();
   });
   var drawMissile = function (_v54) {
      return function () {
         return function () {
            var _v56 = _v54.status;
            switch (_v56.ctor)
            {case "Flying":
               return function () {
                    var color = _U.eq(_v54.kind,
                    Enemy) ? $Color.red : $Color.blue;
                    return $Maybe.Just($Graphics$Collage.move({ctor: "_Tuple2"
                                                              ,_0: _v54.x
                                                              ,_1: _v54.y})($Graphics$Collage.filled(color)(A2($Graphics$Collage.ngon,
                    4,
                    missileW / 2))));
                 }();}
            return $Maybe.Nothing;
         }();
      }();
   };
   var drawGame = F2(function (_v60,
   gameState) {
      return function () {
         switch (_v60.ctor)
         {case "_Tuple2":
            return function () {
                 var content = function () {
                    var _v64 = gameState.status;
                    switch (_v64.ctor)
                    {case "Ended":
                       return _L.fromArray([A2(txt,
                         $Basics.identity,
                         "  GAME OVER!\nTAP to RESTART.")]);
                       case "NotStarted":
                       return _L.fromArray([A2(txt,
                         $Basics.identity,
                         "TAP anywhere to START.")]);
                       case "Started":
                       return $List.concat(_L.fromArray([A2(choose,
                                                        drawExplosions,
                                                        gameState.friendlyMissiles)
                                                        ,A2(choose,
                                                        drawExplosions,
                                                        gameState.enemyMissiles)
                                                        ,A2(choose,
                                                        drawTrail,
                                                        gameState.friendlyMissiles)
                                                        ,A2(choose,
                                                        drawTrail,
                                                        gameState.enemyMissiles)
                                                        ,A2(choose,
                                                        drawMissile,
                                                        gameState.friendlyMissiles)
                                                        ,A2(choose,
                                                        drawMissile,
                                                        gameState.enemyMissiles)]));}
                    _U.badCase($moduleName,
                    "between lines 215 and 224");
                 }();
                 return A3($Graphics$Collage.collage,
                 _v60._0,
                 _v60._1,
                 content);
              }();}
         _U.badCase($moduleName,
         "between lines 214 and 224");
      }();
   });
   var commandH = 40;
   var groundH = 30;
   var getEnemyMissile = F2(function (_v65,
   _v66) {
      return function () {
         switch (_v66.ctor)
         {case "_Tuple2":
            return function () {
                 switch (_v65.ctor)
                 {case "_Tuple2":
                    return function () {
                         var $ = {ctor: "_Tuple2"
                                 ,_0: $Basics.toFloat(_v65._0)
                                 ,_1: $Basics.toFloat(_v65._1)},
                         w = $._0,
                         h = $._1;
                         var getX = function (x) {
                            return w * x - w / 2;
                         };
                         var startPos = {_: {}
                                        ,x: getX(_v66._0)
                                        ,y: h / 2};
                         var endPos = {_: {}
                                      ,x: getX(_v66._1)
                                      ,y: groundH - h / 2};
                         return A3(newMissile,
                         startPos,
                         endPos,
                         Enemy);
                      }();}
                 _U.badCase($moduleName,
                 "between lines 102 and 106");
              }();}
         _U.badCase($moduleName,
         "between lines 102 and 106");
      }();
   });
   var stepGame = F2(function (_v73,
   gameState) {
      return function () {
         switch (_v73.ctor)
         {case "_Tuple2":
            switch (_v73._1.ctor)
              {case "_Tuple2":
                 return function () {
                      var _v79 = {ctor: "_Tuple2"
                                 ,_0: gameState.status
                                 ,_1: _v73._0};
                      switch (_v79.ctor)
                      {case "_Tuple2":
                         switch (_v79._0.ctor)
                           {case "Ended":
                              switch (_v79._1.ctor)
                                {case "UserAction":
                                   return _U.replace([["status"
                                                      ,Started]],
                                     defaultGame);}
                                break;
                              case "NotStarted":
                              switch (_v79._1.ctor)
                                {case "UserAction":
                                   return _U.replace([["status"
                                                      ,Started]],
                                     gameState);}
                                break;
                              case "Started":
                              switch (_v79._1.ctor)
                                {case "EnemyLaunch":
                                   return function () {
                                        var $ = A2($Random.generate,
                                        A2($Random.$int,0,5),
                                        gameState.seed),
                                        cnt = $._0,
                                        seed$ = $._1;
                                        var _ = A2($Random.generate,
                                        A2($Random.list,
                                        cnt,
                                        A2($Random.pair,
                                        A2($Random.$float,0,1),
                                        A2($Random.$float,0,1))),
                                        gameState.seed);
                                        var lst = function () {
                                           switch (_.ctor)
                                           {case "_Tuple2": return _._0;}
                                           _U.badCase($moduleName,
                                           "on line 135, column 24 to 124");
                                        }();
                                        var missiles = A2($List.map,
                                        getEnemyMissile({ctor: "_Tuple2"
                                                        ,_0: _v73._1._0
                                                        ,_1: _v73._1._1}),
                                        lst);
                                        return _U.replace([["enemyMissiles"
                                                           ,A2($Basics._op["++"],
                                                           missiles,
                                                           gameState.enemyMissiles)]
                                                          ,["seed",seed$]],
                                        gameState);
                                     }();
                                   case "Time":
                                   return function () {
                                        var _ = $List.unzip(A2($List.map,
                                        A2(stepMissile,
                                        _v79._1._0,
                                        gameState),
                                        gameState.friendlyMissiles));
                                        var friendlyMissiles = function () {
                                           switch (_.ctor)
                                           {case "_Tuple2": return _._0;}
                                           _U.badCase($moduleName,
                                           "on line 146, column 45 to 114");
                                        }();
                                        var $ = $List.unzip(A2($List.map,
                                        A2(stepMissile,
                                        _v79._1._0,
                                        gameState),
                                        gameState.enemyMissiles)),
                                        enemyMissiles = $._0,
                                        explodeReasons = $._1;
                                        var enemyWins = $List.length(A2($List.filter,
                                        F2(function (x,y) {
                                           return _U.eq(x,y);
                                        })($Maybe.Just(ReachedTarget)),
                                        explodeReasons));
                                        var newHp = $Basics.max(0)(gameState.hp - enemyWins);
                                        var newStatus = _U.eq(newHp,
                                        0) ? Ended : Started;
                                        var playerWins = $List.length(A2($List.filter,
                                        F2(function (x,y) {
                                           return _U.eq(x,y);
                                        })($Maybe.Just(CaughtInBlast)),
                                        explodeReasons));
                                        var newScore = gameState.score + playerWins;
                                        return _U.replace([["enemyMissiles"
                                                           ,A2($List.filter,
                                                           function ($) {
                                                              return F2(function (x,
                                                              y) {
                                                                 return !_U.eq(x,
                                                                 y);
                                                              })(Exploded)(function (_) {
                                                                 return _.status;
                                                              }($));
                                                           },
                                                           enemyMissiles)]
                                                          ,["friendlyMissiles"
                                                           ,A2($List.filter,
                                                           function ($) {
                                                              return F2(function (x,
                                                              y) {
                                                                 return !_U.eq(x,
                                                                 y);
                                                              })(Exploded)(function (_) {
                                                                 return _.status;
                                                              }($));
                                                           },
                                                           friendlyMissiles)]
                                                          ,["hp",newHp]
                                                          ,["score",newScore]
                                                          ,["status"
                                                           ,newStatus]],
                                        gameState);
                                     }();
                                   case "UserAction":
                                   return function () {
                                        var commandTop = {_: {}
                                                         ,x: 0
                                                         ,y: $Basics.toFloat(0 - _v73._1._1) / 2 + groundH + commandH - 10};
                                        return _U.replace([["friendlyMissiles"
                                                           ,A2($List._op["::"],
                                                           A3(newMissile,
                                                           commandTop,
                                                           _v79._1._0,
                                                           Friendly),
                                                           gameState.friendlyMissiles)]],
                                        gameState);
                                     }();}
                                break;}
                           return gameState;}
                      _U.badCase($moduleName,
                      "between lines 131 and 159");
                   }();}
              break;}
         _U.badCase($moduleName,
         "between lines 131 and 159");
      }();
   });
   var gameState = A3($Signal.foldp,
   stepGame,
   defaultGame,
   A2($Signal._op["~"],
   A2($Signal._op["<~"],
   F2(function (v0,v1) {
      return {ctor: "_Tuple2"
             ,_0: v0
             ,_1: v1};
   }),
   input),
   $Window.dimensions));
   var drawBackground = function (_v92) {
      return function () {
         switch (_v92.ctor)
         {case "_Tuple2":
            return function () {
                 var $ = {ctor: "_Tuple2"
                         ,_0: $Basics.toFloat(_v92._0)
                         ,_1: $Basics.toFloat(_v92._1)},
                 w = $._0,
                 h = $._1;
                 var groundY = (0 - h) / 2 + groundH / 2;
                 var centreY = (0 - h) / 2 + commandH;
                 return A2($Graphics$Collage.collage,
                 _v92._0,
                 _v92._1)(_L.fromArray([$Graphics$Collage.filled(A3($Color.rgb,
                                       0,
                                       0,
                                       0))(A2($Graphics$Collage.rect,
                                       w,
                                       h))
                                       ,$Graphics$Collage.move({ctor: "_Tuple2"
                                                               ,_0: 0
                                                               ,_1: groundY})($Graphics$Collage.filled(A3($Color.rgb,
                                       255,
                                       255,
                                       40))(A2($Graphics$Collage.rect,
                                       w,
                                       groundH)))
                                       ,$Graphics$Collage.move({ctor: "_Tuple2"
                                                               ,_0: 0
                                                               ,_1: centreY})($Graphics$Collage.rotate($Basics.degrees(90))($Graphics$Collage.filled(A3($Color.rgb,
                                       255,
                                       255,
                                       40))(A2($Graphics$Collage.ngon,
                                       3,
                                       commandH / 2))))]));
              }();}
         _U.badCase($moduleName,
         "between lines 194 and 203");
      }();
   };
   var display = F2(function (dim,
   gameState) {
      return $Graphics$Element.layers(_L.fromArray([drawBackground(dim)
                                                   ,A2(drawGame,dim,gameState)
                                                   ,A2(drawGameInfo,
                                                   dim,
                                                   gameState)]));
   });
   var main = A2($Signal._op["~"],
   A2($Signal._op["<~"],
   display,
   $Window.dimensions),
   gameState);
   var Pos = F2(function (a,b) {
      return {_: {},x: a,y: b};
   });
   _elm.MissileCommand.values = {_op: _op
                                ,Pos: Pos
                                ,groundH: groundH
                                ,commandH: commandH
                                ,missileW: missileW
                                ,speed: speed
                                ,explosionSpd: explosionSpd
                                ,blastRadius: blastRadius
                                ,Velocity: Velocity
                                ,NotStarted: NotStarted
                                ,Started: Started
                                ,Ended: Ended
                                ,Flying: Flying
                                ,Exploding: Exploding
                                ,Exploded: Exploded
                                ,Friendly: Friendly
                                ,Enemy: Enemy
                                ,ReachedTarget: ReachedTarget
                                ,CaughtInBlast: CaughtInBlast
                                ,Collision: Collision
                                ,Missile: Missile
                                ,GameState: GameState
                                ,Time: Time
                                ,UserAction: UserAction
                                ,EnemyLaunch: EnemyLaunch
                                ,defaultGame: defaultGame
                                ,filterJust: filterJust
                                ,extractJust: extractJust
                                ,choose: choose
                                ,calcVelocity: calcVelocity
                                ,hitTest: hitTest
                                ,newMissile: newMissile
                                ,pairWise: pairWise
                                ,getEnemyMissile: getEnemyMissile
                                ,stepMissile: stepMissile
                                ,stepGame: stepGame
                                ,drawMissile: drawMissile
                                ,drawTrail: drawTrail
                                ,drawExplosions: drawExplosions
                                ,drawBackground: drawBackground
                                ,drawGameInfo: drawGameInfo
                                ,drawGame: drawGame
                                ,display: display
                                ,txt: txt
                                ,userInput: userInput
                                ,enemyLaunch: enemyLaunch
                                ,delta: delta
                                ,timer: timer
                                ,input: input
                                ,gameState: gameState
                                ,main: main};
   return _elm.MissileCommand.values;
};